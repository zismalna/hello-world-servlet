pipeline {
    agent {
        docker {
            image 'hashicorp/terraform:latest'
            args '--entrypoint="" -u root'
        }
    }
    parameters {
        choice(name: 'AWS_ENV', choices: ['dev', 'stage'], description: 'AWS environment')
        choice(name: 'TERRAFORM_MODULE', choices: ['network', 'data'], description: 'Terraform module to use')
        choice(name: 'ACTION', choices: ['apply', 'destroy'], description: 'Set up or destroy environment')
    }
    stages {
        stage('build') {
            steps {
                sh 'echo $AWS_ENV'
                sh 'echo $TERRAFORM_MODULE'
                sh 'echo $ACTION'
                git branch: 'main', url: 'https://git.epam.com/mykhailo_lopaiev/pet-project-aws-and-ci-cd', credentialsId: 'github-deploy'
                echo '========Building package========'
                withAWS(credentials:'awsAKIA6JPPVFU3AX6YK47O', region: 'eu-central-1') {
                    sh 'pwd'
                    dir('Terraform/modules/${params.TERRAFORM_MODULE}') {
                        sh 'terraform init'
                        sh 'terraform workspace select ${params.AWS_ENV}'
                        script {
                        if ($params.ACTION == 'apply') {
                            sh 'terraform plan -out tfplan'
                            sh 'terraform apply tfplan'
                        }
                        
                else if ($params.ACTION == 'destroy') {
                            sh 'terraform plan -destroy -out tfplan'
                            sh 'terraform destroy -auto-approve'
                }
                        }

                        post {
                            success {
                                echo '========Build executed successfully========'
                            }
                            failure {
                                echo '========A execution failed========'
                            }
                        }
                    }
                }
            }
        }
    }
}
